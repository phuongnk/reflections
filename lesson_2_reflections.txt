What happens when you initialize a repository? Why do you need to do it?
	Git makes the current directory a Git repository by creating a subfolder named .git with metadata in it.
	Without initializing, a directory is not a Git repository and it's contents can't be versioned.
How is the staging area different from the working directory and the repository? What value do you think it offers?
	Staging area contains the (information about the) files that will be tracked by Git.
	Working directory contains all the files, both tracked and un-tracked.
	Staging area allows to work with (choose, change, add, remove) files before committing, without the need to do multiple commits.
	
How can you use the staging area to make sure you have one commit per logical change?
	Only "add" the files that have been changed for the purpose of the "logical change" to the staging area. 
	Do not add other changed files to the staging area.
What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	- Experiment with some changes
	- Add new features but want to separate it from the master branch until the new feature code is stable
	In general, the master branch is usually for production-quality code, other branches are for experimental, ongoing changes 
How do the diagrams help you visualize the branch structure?
	It shows branches (where they start and end), and the commits in each of them
What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
	Changes in both branches are combined
	A new, merged commit is created with both branches' changes
What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
	Pros of automatic merging (theoretical only, not supported by Git in reality (?)):
		- Save time
	Cons of automatic merging:
		- It can merge branches when they are not ready to be merged (changes are not done, etc)
		- It doesn't know how to solve conflicts

